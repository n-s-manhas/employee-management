name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Compose environment
        run: docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for database to be ready..."
          until docker exec employee-management_db_1 mysql -uroot -proot -e "select 1;" > /dev/null 2>&1; do
            sleep 1
          done
          echo "Database is ready!"

      - name: Run database migration (if needed) and seed data
        run: docker exec -i employee-management_app_1 mysql -uroot -proot employee_management < employee-management.sql

      - name: Run PHP tests (if you have them)
        run: |
          # Add commands here to run your tests, e.g., using PHPUnit
          # php vendor/bin/phpunit
          echo "No PHPUnit tests found, skipping test step."

      - name: Build Docker image for deployment
        run: |
          docker build -t your-dockerhub-username/employee-management:${{ github.sha }} .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push your-dockerhub-username/employee-management:${{ github.sha }}
      
  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Pull the latest Docker image
            docker pull your-dockerhub-username/employee-management:${{ github.sha }}
            
            # Stop and remove old container
            docker stop my-app || true
            docker rm my-app || true
            
            # Run new container
            docker run -d --name my-app -p 80:80 your-dockerhub-username/employee-management:${{ github.sha }}
